# SPDX-FileCopyrightText: 2023 Bernd Flemisch <bernd.flemisch@iws.uni-stuttgart.de>
#
# SPDX-License-Identifier: MIT

""" Generate tables for component fluid properties.

The tables are generated using the NIST (National Institute of Standards
and Technology) Standard Reference Database Number 69
(https://doi.org/10.18434/T4D303).

Copyright for NIST Standard Reference Data is governed by the Standard
Reference Data Act (https://www.nist.gov/srd/public-law).

######################################################################
In case you are using this the data generated with this script
please cite the following publications:

P.J. Linstrom and W.G. Mallard, Eds.,
NIST Chemistry WebBook, NIST Standard Reference Database Number 69,
National Institute of Standards and Technology, Gaithersburg MD, 20899,
https://doi.org/10.18434/T4D303, (retrieved [insert date]).
######################################################################

The enthalpy values provided by NIST are given with respect to the IIR convention
reference state: the enthalpy is set to 200000 J/kg at 0°C for the saturated liquid.
"""

from io import StringIO
import urllib
import requests  # pylint: disable=import-error
import numpy as np  # pylint: disable=import-error


comp_id = {"H2O": "C7732185", "C1": "C74828", "CO2": "C124389"}


def get_nist_data(component: str, pressure: list, temperature: list, include_phase_boundary: bool = True):
    isothermal = True if isinstance(temperature, float) else False
    assert not (isinstance(pressure, float) and isinstance(temperature, float)), "Provide either constant P or T"
    assert not (isinstance(pressure, (list, np.ndarray)) and isinstance(temperature, (list, np.ndarray))), "Provide either constant P or T"
    # Below, the reference state IIR is selected, corresponding to
    # "setting enthalpy to 200 kJ/kg and entropy to 1.0 kJ/(kg-K) for the saturated liquid at 0 °C".
    # See https://refprop-docs.readthedocs.io/en/latest/GUI/Menu%20Commands/Options%20Menu/reference.html?highlight=IIR#reference-state
    query = {
        "Action": "Data",
        "Wide": "on",
        "ID": comp_id[component],
        "Digits": "12",
        "RefState": "IIR",
        "TUnit": "K",
        "PUnit": "bar",
        "DUnit": "kg/m3",
        "HUnit": "kJ/mol",
        "WUnit": "m/s",
        "VisUnit": "cP",
        "STUnit": "N/m",
    }
    if isothermal:
        query.update({"Type": "IsoTherm", "PLow": str(pressure[0]), "PHigh": str(pressure[-1]),
                      "PInc": str(pressure[1]-pressure[0]), "T": str(temperature)})
    else:
        query.update({"Type": "IsoBar", "TLow": str(temperature[0]), "THigh": str(temperature[-1]),
                      "TInc": str(temperature[1]-temperature[0]), "P": str(pressure)})

    response = requests.get(
        "https://webbook.nist.gov/cgi/fluid.cgi?" + urllib.parse.urlencode(query)
    )
    response.encoding = "utf-8"
    text = response.text
    phase = np.genfromtxt(StringIO(text), delimiter="\t", dtype=str, usecols=[-1], skip_header=1)
    values = np.genfromtxt(StringIO(text), delimiter="\t", names=True)

    # NIST provides additional samples at the transition points (if there is a
    # phase transition within the requested data range). Since the code which
    # uses the tables generated by this script can't deal with these additional
    # sample points, they are removed.
    phaseBoundaryIndices = []
    if not include_phase_boundary:
        for j in range(1, len(phase) - 1):
            if phase[j] != phase[j + 1]:
                phaseBoundaryIndices += [j, j + 1]

    if isothermal:
        pressure = list(np.delete(values["Pressure_bar"], phaseBoundaryIndices))
    else:
        temperature = list(np.delete(values["Temperature_K"], phaseBoundaryIndices))
    density = list(np.delete(values["Density_kgm3"], phaseBoundaryIndices))
    viscosity = list(np.delete(values["Viscosity_cP"], phaseBoundaryIndices))
    enthalpy = list(np.delete(values["Enthalpy_kJmol"], phaseBoundaryIndices))
    entropy = list(np.delete(values["Entropy_JmolK"], phaseBoundaryIndices))
    internal_energy = list(np.delete(values["Internal_Energy_kJmol"], phaseBoundaryIndices))
    cv = list(np.delete(values["Cv_JmolK"],phaseBoundaryIndices))
    cp = list(np.delete(values["Cp_JmolK"],phaseBoundaryIndices))
    thermCond = list(np.delete(values["Therm_Cond_WmK"], phaseBoundaryIndices))
    jt = list(np.delete(values["JouleThomson_Kbar"], phaseBoundaryIndices))
    ss = list(np.delete(values["Sound_Spd_ms"], phaseBoundaryIndices))

    return {"pressure": pressure, "temperature": temperature, "density": density, "viscosity": viscosity,
            "enthalpy": enthalpy, "entropy": entropy, "internal_energy": internal_energy, "cv": cv, "cp": cp,
            "thermcond": thermCond, "jt": jt, "sound_speed": ss}
